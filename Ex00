Files to turn in : ft_print_program_name.c
Allowed functions : write

• We’re dealing with a program here, you should therefore have a function main in
your .c file.
• Create a program that displays its own name.
• Example :
$>./a.out
./a.out
$>

Here's an implementation of the `ft_print_program_name` program that displays its own name:

```c
#include <unistd.h>

int main(int argc, char *argv[])
{
    int i = 0;

    while (argv[0][i] != '\0') {
        write(1, &argv[0][i], 1);
        i++;
    }
    write(1, "\n", 1);

    return 0;
}
```

In this program, the `main` function takes two parameters: `argc` (argument count) and `argv` (argument vector). The program's name is stored in `argv[0]`.

The program uses a `while` loop to iterate through each character of `argv[0]` and writes it to the standard output using the `write` function. After printing the name, it writes a newline character (`\n`) to create a new line.

To compile and run the program, you can use the following commands:

```shell
gcc ft_print_program_name.c -o print_program_name
./print_program_name
```

The program will display its own name on the terminal. For example:

```
$>./print_program_name
./print_program_name
$>
```

Please note that the program assumes the name of the executable is stored in `argv[0]`. If the program is executed with command-line arguments, `argv[0]` may not necessarily contain the actual name of the executable.
