Files to turn in : ft_print_params.c
Allowed functions : write

• We’re dealing with a program here, you should therefore have a function main in
your .c file.
• Create a program that displays its given arguments.
• One per line, in the same order as in the command line.
• It should display all arguments, except for argv[0].
• Example :
$>./a.out test1 test2 test3
test1
test2
test3
$>

Here's an implementation of the `ft_print_params` program that displays its given arguments:

```c
#include <unistd.h>

int main(int argc, char *argv[])
{
    int i;

    for (i = 1; i < argc; i++) {
        int j = 0;
        while (argv[i][j] != '\0') {
            write(1, &argv[i][j], 1);
            j++;
        }
        write(1, "\n", 1);
    }

    return 0;
}
```

In this program, the `main` function takes two parameters: `argc` (argument count) and `argv` (argument vector). The program loops through the command-line arguments starting from index 1 (to exclude the program name itself).

For each argument, it uses a nested `while` loop to iterate through each character and writes it to the standard output using the `write` function. After printing each argument, it writes a newline character (`\n`) to create a new line.

To compile and run the program, you can use the following commands:

```shell
gcc ft_print_params.c -o print_params
./print_params test1 test2 test3
```

The program will display the given arguments, one per line, in the same order as they appear on the command line. For example:

```
$>./print_params test1 test2 test3
test1
test2
test3
$>
```

Please note that the program assumes the arguments are passed as command-line arguments (`argv`). If you need to pass arguments through other means, such as reading from a file or taking input from the user, the program logic may need to be modified accordingly.
